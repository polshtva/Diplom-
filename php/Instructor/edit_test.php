<?php
include '../db_config.php';
session_start();

ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// –ü–æ–ª—É—á–∞–µ–º ID —É—Ä–æ–∫–∞ –∏ —Ç–µ—Å—Ç–∞ –∏–∑ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
$lessonId = isset($_GET['lesson_id']) ? (int)$_GET['lesson_id'] : 0;
$courseId = isset($_GET['$courseId']) ? (int)$_GET['$courseId'] : 0;
$testId = isset($_GET['test_id']) ? (int)$_GET['test_id'] : 0;


// –ü–æ–ª—É—á–∞–µ–º ID –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
$instructorId = $_SESSION['user_id'] ?? 0;
if ($instructorId === 0) {
    die("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
}

// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω lesson_id, –Ω–æ –Ω–µ test_id, –∏—â–µ–º —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
if ($lessonId > 0 && $testId === 0) {
    try {
        $stmt = $pdo->prepare("SELECT Test_Id FROM Test WHERE Lesson_Id = :lesson_id AND Instructor_Id = :instructor LIMIT 1");
        $stmt->bindParam(':lesson_id', $lessonId, PDO::PARAM_INT);
        $stmt->bindParam(':instructor', $instructorId, PDO::PARAM_INT);
        $stmt->execute();

        $testData = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($testData) {
            $testId = (int)$testData['Test_Id'];
        } else {
            header("Location: create_test.php?lesson_id=" . $lessonId);
            exit();
        }
    } catch (PDOException $e) {
        die("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage());
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
if (isset($_GET['delete_test']) && $_GET['delete_test'] == 1) {
    try {
        $pdo->beginTransaction();

        // –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        $stmt = $pdo->prepare("DELETE FROM VarAnswers WHERE Question_Id IN (SELECT Question_Id FROM Question WHERE Test_Id = :test_id)");
        $stmt->bindParam(':test_id', $testId, PDO::PARAM_INT);
        $stmt->execute();

        // –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        $stmt = $pdo->prepare("DELETE FROM Question WHERE Test_Id = :test_id");
        $stmt->bindParam(':test_id', $testId, PDO::PARAM_INT);
        $stmt->execute();

        // –£–¥–∞–ª—è–µ–º —Å–∞–º —Ç–µ—Å—Ç
        $stmt = $pdo->prepare("DELETE FROM Test WHERE Test_Id = :test_id AND Instructor_Id = :instructor");
        $stmt->bindParam(':test_id', $testId, PDO::PARAM_INT);
        $stmt->bindParam(':instructor', $instructorId, PDO::PARAM_INT);
        $stmt->execute();

        $pdo->commit();

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        header("Location: info_course.php?lesson_id=" . $lessonId);
        exit();
    } catch (PDOException $e) {
        $pdo->rollBack();
        die("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: " . $e->getMessage());
    }
}

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
$userName = $_SESSION['user_name'] ?? '';
$userSurname = $_SESSION['user_surname'] ?? '';
$userPatronymic = $_SESSION['user_patronymic'] ?? '';

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
$initials = mb_substr($userSurname, 0, 1) . mb_substr($userName, 0, 1);

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
$testData = [];
$questionsData = [];

try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    $stmt = $pdo->prepare("SELECT * FROM Test WHERE Test_Id = :test_id AND Instructor_Id = :instructor");
    $stmt->bindParam(':test_id', $testId, PDO::PARAM_INT);
    $stmt->bindParam(':instructor', $instructorId, PDO::PARAM_INT);
    $stmt->execute();
    $testData = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$testData) {
        die("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
    $stmt = $pdo->prepare("SELECT * FROM Question WHERE Test_Id = :test_id ORDER BY Question_Id");
    $stmt->bindParam(':test_id', $testId, PDO::PARAM_INT);
    $stmt->execute();
    $questions = $stmt->fetchAll(PDO::FETCH_ASSOC);

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    foreach ($questions as $question) {
        $stmt = $pdo->prepare("SELECT * FROM VarAnswers WHERE Question_Id = :question_id ORDER BY VarAnswers_Id");
        $stmt->bindParam(':question_id', $question['Question_Id'], PDO::PARAM_INT);
        $stmt->execute();
        $answers = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $questionsData[] = [
            'question' => $question,
            'answers' => $answers
        ];
    }
} catch (PDOException $e) {
    die("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage());
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
if ($_SERVER['REQUEST_METHOD'] === 'POST' && !isset($_POST['preview']) && isset($_POST['test_name'])) {
    $pdo->beginTransaction();

    try {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞
        $testName = htmlspecialchars($_POST['test_name']);
        $testDesc = htmlspecialchars($_POST['test_desc']);
        $testType = $_POST['test_type'];
        $testQuantity = count($_POST['question_text']);
        $testMinMark = (int)$_POST['test_min_mark'];

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        $stmt = $pdo->prepare("UPDATE Test SET 
                             Test_Name = :name, 
                             Test_Desc = :desc, 
                             Test_Type = :type, 
                             Test_Quantity = :quantity, 
                             Test_MinMark = :minmark 
                             WHERE Test_Id = :test_id AND Instructor_Id = :instructor");
        $stmt->bindParam(':name', $testName);
        $stmt->bindParam(':desc', $testDesc);
        $stmt->bindParam(':type', $testType);
        $stmt->bindParam(':quantity', $testQuantity, PDO::PARAM_INT);
        $stmt->bindParam(':minmark', $testMinMark, PDO::PARAM_INT);
        $stmt->bindParam(':test_id', $testId, PDO::PARAM_INT);
        $stmt->bindParam(':instructor', $instructorId, PDO::PARAM_INT);
        $stmt->execute();

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        $stmt = $pdo->prepare("DELETE FROM VarAnswers WHERE Question_Id IN (SELECT Question_Id FROM Question WHERE Test_Id = :test_id)");
        $stmt->bindParam(':test_id', $testId, PDO::PARAM_INT);
        $stmt->execute();

        $stmt = $pdo->prepare("DELETE FROM Question WHERE Test_Id = :test_id");
        $stmt->bindParam(':test_id', $testId, PDO::PARAM_INT);
        $stmt->execute();

        // –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        foreach ($_POST['question_text'] as $index => $qText) {
            $qText = htmlspecialchars($qText);
            $qType = $_POST['question_type'][$index];
            $qMark = (int)$_POST['question_mark'][$index];

            $stmt = $pdo->prepare("INSERT INTO Question (Test_Id, Question_Text, Question_Type, Question_Mark)
                                  VALUES (:test_id, :text, :type, :mark)");
            $stmt->bindParam(':test_id', $testId, PDO::PARAM_INT);
            $stmt->bindParam(':text', $qText);
            $stmt->bindParam(':type', $qType);
            $stmt->bindParam(':mark', $qMark, PDO::PARAM_INT);
            $stmt->execute();

            $questionId = $pdo->lastInsertId();

            // –í—Å—Ç–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
            if (isset($_POST['answers'][$index])) {
                foreach ($_POST['answers'][$index] as $aIndex => $answerText) {
                    $answerText = htmlspecialchars($answerText);
                    $isCorrect = isset($_POST['correct'][$index]) && in_array($aIndex, $_POST['correct'][$index]) ? 1 : 0;

                    $stmt = $pdo->prepare("INSERT INTO VarAnswers (Question_Id, VarAnswers_Text, VarAnswers_Correct)
                                          VALUES (:question_id, :text, :correct)");
                    $stmt->bindParam(':question_id', $questionId, PDO::PARAM_INT);
                    $stmt->bindParam(':text', $answerText);
                    $stmt->bindParam(':correct', $isCorrect, PDO::PARAM_INT);
                    $stmt->execute();
                }
            }
        }

        $pdo->commit();
        header("Location: edit_test.php?test_id=" . $testId . "&lesson_id=" . $lessonId . "&success=1");
        exit();
    } catch (PDOException $e) {
        $pdo->rollBack();
        $errorMessage = "–û—à–∏–±–∫–∞: " . htmlspecialchars($e->getMessage());
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º success-–ø–∞—Ä–∞–º–µ—Ç—Ä
if (isset($_GET['success']) && $_GET['success'] == 1) {
    $successMessage = "‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!";
}
?>

<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../../css/style_Instructor/create_test.css">
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    
</head>

<body>
    <?php include '../components/header.php'; ?>

    <div class="container">
        <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</h2>

        <div class="action-buttons">
            <button onclick="confirmDeleteTest()" class="btn btn-danger">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç</button>
        </div>

        <?php if (!empty($successMessage)): ?>
            <div class="success-message"><?= $successMessage ?></div>
        <?php endif; ?>

        <?php if (!empty($errorMessage)): ?>
            <div class="error-message"><?= $errorMessage ?></div>
        <?php endif; ?>

        <form method="post" id="testForm">
            <input type="hidden" name="test_id" value="<?= $testId ?>">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:</label>
            <input type="text" name="test_name" value="<?= htmlspecialchars($testData['Test_Name'] ?? '') ?>" required>

            <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
            <textarea name="test_desc"><?= htmlspecialchars($testData['Test_Desc'] ?? '') ?></textarea>

            <label>–¢–∏–ø —Ç–µ—Å—Ç–∞:</label>
            <select name="test_type" required>
                <option value="one" <?= ($testData['Test_Type'] ?? '') === 'one' ? 'selected' : '' ?>>–° –æ–¥–Ω–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º</option>
                <option value="multi" <?= ($testData['Test_Type'] ?? '') === 'multi' ? 'selected' : '' ?>>–° –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏</option>
            </select>

            <label>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</label>
            <input type="text" name="test_min_mark" value="<?= htmlspecialchars($testData['Test_MinMark'] ?? '') ?>" required>

            <div id="questions" class="sortable">
                <?php foreach ($questionsData as $index => $questionData): ?>
                    <div class="question-block" data-id="<?= $index ?>">
                        <label>–í–æ–ø—Ä–æ—Å:</label>
                        <input type="text" name="question_text[<?= $index ?>]" value="<?= htmlspecialchars($questionData['question']['Question_Text'] ?? '') ?>" required>

                        <label>–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞:</label>
                        <select name="question_type[<?= $index ?>]" onchange="changeAnswerType(<?= $index ?>, this.value)" required>
                            <option value="radio" <?= ($questionData['question']['Question_Type'] ?? '') === 'radio' ? 'selected' : '' ?>>–û–¥–∏–Ω –≤–µ—Ä–Ω—ã–π</option>
                            <option value="checkbox" <?= ($questionData['question']['Question_Type'] ?? '') === 'checkbox' ? 'selected' : '' ?>>–ù–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–Ω—ã—Ö</option>
                        </select>

                        <label>–ë–∞–ª–ª—ã –∑–∞ –≤–æ–ø—Ä–æ—Å:</label>
                        <input type="text" name="question_mark[<?= $index ?>]" value="<?= htmlspecialchars($questionData['question']['Question_Mark'] ?? '') ?>" required>

                        <div class="answer-block" id="answers-<?= $index ?>">
                            <?php foreach ($questionData['answers'] as $aIndex => $answer): ?>
                                <div class="answer-item">
                                    <input type="<?= $questionData['question']['Question_Type'] === 'radio' ? 'radio' : 'checkbox' ?>"
                                        name="correct[<?= $index ?>][]"
                                        value="<?= $aIndex ?>"
                                        data-q="<?= $index ?>"
                                        <?= $answer['VarAnswers_Correct'] ? 'checked' : '' ?>
                                        onchange="enforceSingleCorrect(<?= $index ?>)">
                                    <input type="text" name="answers[<?= $index ?>][]" value="<?= htmlspecialchars($answer['VarAnswers_Text'] ?? '') ?>" placeholder="–û—Ç–≤–µ—Ç" required>
                                    <button type="button" class="btn btn-danger" onclick="confirmRemoveAnswer(this)">‚úñ</button>
                                </div>
                            <?php endforeach; ?>
                        </div>

                        <button type="button" class="btn" onclick="addAnswer(<?= $index ?>)">+ –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç</button>
                        <button type="button" class="btn btn-danger" onclick="confirmRemoveQuestion(this)">–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å</button>
                    </div>
                <?php endforeach; ?>
            </div>
            <button type="button" style="margin-top: 20px;" class="btn" onclick="addQuestion()">+ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å</button>
            <br><br>
            <div class="btn-group">
                <button type="button" class="btn" onclick="previewTest()">üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</button>
                <button type="submit" class="btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
            </div>
        </form>

        <div id="previewContainer" style="display:none; margin-top: 40px;">
            <h3>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞</h3>
            <div id="previewContent" style="border:1px solid #ccc; padding:20px; background:#f9f9f9;"></div>
        </div>
    </div>

    <script>
        let questionIndex = <?= count($questionsData) ?>;

        function addQuestion() {
            const container = document.getElementById('questions');

            const qBlock = document.createElement('div');
            qBlock.className = 'question-block';
            qBlock.setAttribute("data-id", questionIndex);
            qBlock.innerHTML = `
                <label>–í–æ–ø—Ä–æ—Å:</label>
                <input type="text" name="question_text[${questionIndex}]" required>

                <label>–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞:</label>
                <select name="question_type[${questionIndex}]" onchange="changeAnswerType(${questionIndex}, this.value)" required>
                    <option value="radio" selected>–û–¥–∏–Ω –≤–µ—Ä–Ω—ã–π</option>
                    <option value="checkbox">–ù–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–Ω—ã—Ö</option>
                </select>

                <label>–ë–∞–ª–ª—ã –∑–∞ –≤–æ–ø—Ä–æ—Å:</label>
                <input type="text" name="question_mark[${questionIndex}]" required>

                <div class="answer-block" id="answers-${questionIndex}"></div>

                <button type="button" class="btn" onclick="addAnswer(${questionIndex})">+ –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç</button>
                <button type="button"  class="btn btn-danger" onclick="confirmRemoveQuestion(this)">–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å</button>
            `;
            container.appendChild(qBlock);
            addAnswer(questionIndex);
            questionIndex++;
        }

        function addAnswer(qIdx) {
            const aContainer = document.getElementById(`answers-${qIdx}`);
            const aIndex = aContainer.children.length;
            const qType = document.querySelector(`select[name="question_type[${qIdx}]"]`).value;

            const aItem = document.createElement('div');
            aItem.className = 'answer-item';
            aItem.innerHTML = `
                <input type="${qType}" name="correct[${qIdx}][]" value="${aIndex}" data-q="${qIdx}" onchange="enforceSingleCorrect(${qIdx})">
                <input type="text" name="answers[${qIdx}][]" placeholder="–û—Ç–≤–µ—Ç" required>
                <button type="button" class="btn btn-danger" onclick="confirmRemoveAnswer(this)">‚úñ</button>
            `;
            aContainer.appendChild(aItem);
        }

        function confirmRemoveAnswer(btn) {
            if (confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞?")) {
                btn.parentElement.remove();
            }
        }

        function confirmRemoveQuestion(btn) {
            if (confirm("–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –≤–æ–ø—Ä–æ—Å —Å–æ –≤—Å–µ–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏?")) {
                btn.parentElement.remove();
            }
        }

        function confirmDeleteTest() {
            if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")) {
                window.location.href = "edit_test.php?test_id=<?= $testId ?>&lesson_id=<?= $lessonId ?>&delete_test=1";
            }
        }

        function changeAnswerType(qIdx, type) {
            const answers = document.querySelectorAll(`#answers-${qIdx} input[type="checkbox"], #answers-${qIdx} input[type="radio"]`);
            answers.forEach(el => {
                el.type = type === 'radio' ? 'radio' : 'checkbox';
                el.name = `correct[${qIdx}][]`;
            });
        }

        function enforceSingleCorrect(qIdx) {
            const type = document.querySelector(`select[name="question_type[${qIdx}]"]`).value;
            if (type === 'radio') {
                const radios = document.querySelectorAll(`input[name="correct[${qIdx}][]"]`);
                radios.forEach(r => r.checked = false);
                event.target.checked = true;
            }
        }

        new Sortable(document.getElementById('questions'), {
            animation: 150,
            ghostClass: 'sortable-ghost'
        });

        function previewTest() {
            const form = document.getElementById('testForm');
            const formData = new FormData(form);
            let html = `<strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${formData.get('test_name')}<br>
                    <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${formData.get('test_desc')}<br>
                    <strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</strong> ${formData.get('test_min_mark')}<br><hr>`;

            const questions = document.querySelectorAll('.question-block');
            questions.forEach((block, idx) => {
                const qText = block.querySelector(`input[name^="question_text"]`).value;
                const qType = block.querySelector(`select[name^="question_type"]`).value;
                const qMark = block.querySelector(`input[name^="question_mark"]`).value;
                html += `<div><strong>–í–æ–ø—Ä–æ—Å ${idx + 1}:</strong> ${qText} (${qMark} –±–∞–ª–ª–æ–≤, —Ç–∏–ø: ${qType})<ul>`;

                const answers = block.querySelectorAll('.answer-item');
                answers.forEach(a => {
                    const txt = a.querySelector('input[type="text"]').value;
                    const isCorrect = a.querySelector('input[type="checkbox"], input[type="radio"]').checked ? '‚úÖ' : '';
                    html += `<li>${txt} ${isCorrect}</li>`;
                });

                html += `</ul></div><hr>`;
            });

            document.getElementById('previewContent').innerHTML = html;
            document.getElementById('previewContainer').style.display = 'block';
            window.scrollTo(0, document.body.scrollHeight);
        }
    </script>
</body>

</html>